#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TruckManage
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLLX")]
	public partial class TruckDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTYPE(TYPE instance);
    partial void UpdateTYPE(TYPE instance);
    partial void DeleteTYPE(TYPE instance);
    partial void InsertLEVEL(LEVEL instance);
    partial void UpdateLEVEL(LEVEL instance);
    partial void DeleteLEVEL(LEVEL instance);
    partial void InsertDRIVER(DRIVER instance);
    partial void UpdateDRIVER(DRIVER instance);
    partial void DeleteDRIVER(DRIVER instance);
    partial void InsertADMINMN(ADMINMN instance);
    partial void UpdateADMINMN(ADMINMN instance);
    partial void DeleteADMINMN(ADMINMN instance);
    partial void InsertACCOUNT(ACCOUNT instance);
    partial void UpdateACCOUNT(ACCOUNT instance);
    partial void DeleteACCOUNT(ACCOUNT instance);
    #endregion
		
		public TruckDataDataContext() : 
				base(global::TruckManage.Properties.Settings.Default.QLLXConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public TruckDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TruckDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TruckDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TruckDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TYPE> TYPEs
		{
			get
			{
				return this.GetTable<TYPE>();
			}
		}
		
		public System.Data.Linq.Table<LEVEL> LEVELs
		{
			get
			{
				return this.GetTable<LEVEL>();
			}
		}
		
		public System.Data.Linq.Table<DRIVER> DRIVERs
		{
			get
			{
				return this.GetTable<DRIVER>();
			}
		}
		
		public System.Data.Linq.Table<ADMINMN> ADMINMNs
		{
			get
			{
				return this.GetTable<ADMINMN>();
			}
		}
		
		public System.Data.Linq.Table<ACCOUNT> ACCOUNTs
		{
			get
			{
				return this.GetTable<ACCOUNT>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TYPE")]
	public partial class TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TYPENAME;
		
		private EntitySet<ACCOUNT> _ACCOUNTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTYPENAMEChanging(string value);
    partial void OnTYPENAMEChanged();
    #endregion
		
		public TYPE()
		{
			this._ACCOUNTs = new EntitySet<ACCOUNT>(new Action<ACCOUNT>(this.attach_ACCOUNTs), new Action<ACCOUNT>(this.detach_ACCOUNTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPENAME", DbType="NVarChar(50)")]
		public string TYPENAME
		{
			get
			{
				return this._TYPENAME;
			}
			set
			{
				if ((this._TYPENAME != value))
				{
					this.OnTYPENAMEChanging(value);
					this.SendPropertyChanging();
					this._TYPENAME = value;
					this.SendPropertyChanged("TYPENAME");
					this.OnTYPENAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TYPE_ACCOUNT", Storage="_ACCOUNTs", ThisKey="ID", OtherKey="TYPEID")]
		public EntitySet<ACCOUNT> ACCOUNTs
		{
			get
			{
				return this._ACCOUNTs;
			}
			set
			{
				this._ACCOUNTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ACCOUNTs(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.TYPE = this;
		}
		
		private void detach_ACCOUNTs(ACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.TYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[LEVEL]")]
	public partial class LEVEL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private EntitySet<ADMINMN> _ADMINMNs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public LEVEL()
		{
			this._ADMINMNs = new EntitySet<ADMINMN>(new Action<ADMINMN>(this.attach_ADMINMNs), new Action<ADMINMN>(this.detach_ADMINMNs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LEVEL_ADMINMN", Storage="_ADMINMNs", ThisKey="ID", OtherKey="IDLEVEL")]
		public EntitySet<ADMINMN> ADMINMNs
		{
			get
			{
				return this._ADMINMNs;
			}
			set
			{
				this._ADMINMNs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ADMINMNs(ADMINMN entity)
		{
			this.SendPropertyChanging();
			entity.LEVEL = this;
		}
		
		private void detach_ADMINMNs(ADMINMN entity)
		{
			this.SendPropertyChanging();
			entity.LEVEL = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DRIVER")]
	public partial class DRIVER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private string _IDCARD;
		
		private string _ADDRESS;
		
		private string _PHONE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnIDCARDChanging(string value);
    partial void OnIDCARDChanged();
    partial void OnADDRESSChanging(string value);
    partial void OnADDRESSChanged();
    partial void OnPHONEChanging(string value);
    partial void OnPHONEChanged();
    #endregion
		
		public DRIVER()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCARD", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string IDCARD
		{
			get
			{
				return this._IDCARD;
			}
			set
			{
				if ((this._IDCARD != value))
				{
					this.OnIDCARDChanging(value);
					this.SendPropertyChanging();
					this._IDCARD = value;
					this.SendPropertyChanged("IDCARD");
					this.OnIDCARDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDRESS", DbType="NVarChar(50)")]
		public string ADDRESS
		{
			get
			{
				return this._ADDRESS;
			}
			set
			{
				if ((this._ADDRESS != value))
				{
					this.OnADDRESSChanging(value);
					this.SendPropertyChanging();
					this._ADDRESS = value;
					this.SendPropertyChanged("ADDRESS");
					this.OnADDRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHONE", DbType="NChar(20)")]
		public string PHONE
		{
			get
			{
				return this._PHONE;
			}
			set
			{
				if ((this._PHONE != value))
				{
					this.OnPHONEChanging(value);
					this.SendPropertyChanging();
					this._PHONE = value;
					this.SendPropertyChanged("PHONE");
					this.OnPHONEChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ADMINMN")]
	public partial class ADMINMN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private System.Nullable<int> _IDLEVEL;
		
		private EntityRef<LEVEL> _LEVEL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnIDLEVELChanging(System.Nullable<int> value);
    partial void OnIDLEVELChanged();
    #endregion
		
		public ADMINMN()
		{
			this._LEVEL = default(EntityRef<LEVEL>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLEVEL", DbType="Int")]
		public System.Nullable<int> IDLEVEL
		{
			get
			{
				return this._IDLEVEL;
			}
			set
			{
				if ((this._IDLEVEL != value))
				{
					if (this._LEVEL.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLEVELChanging(value);
					this.SendPropertyChanging();
					this._IDLEVEL = value;
					this.SendPropertyChanged("IDLEVEL");
					this.OnIDLEVELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LEVEL_ADMINMN", Storage="_LEVEL", ThisKey="IDLEVEL", OtherKey="ID", IsForeignKey=true)]
		public LEVEL LEVEL
		{
			get
			{
				return this._LEVEL.Entity;
			}
			set
			{
				LEVEL previousValue = this._LEVEL.Entity;
				if (((previousValue != value) 
							|| (this._LEVEL.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LEVEL.Entity = null;
						previousValue.ADMINMNs.Remove(this);
					}
					this._LEVEL.Entity = value;
					if ((value != null))
					{
						value.ADMINMNs.Add(this);
						this._IDLEVEL = value.ID;
					}
					else
					{
						this._IDLEVEL = default(Nullable<int>);
					}
					this.SendPropertyChanged("LEVEL");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ACCOUNT")]
	public partial class ACCOUNT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _USERNAME;
		
		private string _PASSWORD;
		
		private System.Nullable<int> _TYPEID;
		
		private System.Nullable<int> _STATUS;
		
		private EntityRef<TYPE> _TYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUSERNAMEChanging(string value);
    partial void OnUSERNAMEChanged();
    partial void OnPASSWORDChanging(string value);
    partial void OnPASSWORDChanged();
    partial void OnTYPEIDChanging(System.Nullable<int> value);
    partial void OnTYPEIDChanged();
    partial void OnSTATUSChanging(System.Nullable<int> value);
    partial void OnSTATUSChanged();
    #endregion
		
		public ACCOUNT()
		{
			this._TYPE = default(EntityRef<TYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USERNAME", DbType="NChar(50)")]
		public string USERNAME
		{
			get
			{
				return this._USERNAME;
			}
			set
			{
				if ((this._USERNAME != value))
				{
					this.OnUSERNAMEChanging(value);
					this.SendPropertyChanging();
					this._USERNAME = value;
					this.SendPropertyChanged("USERNAME");
					this.OnUSERNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASSWORD", DbType="NVarChar(256)")]
		public string PASSWORD
		{
			get
			{
				return this._PASSWORD;
			}
			set
			{
				if ((this._PASSWORD != value))
				{
					this.OnPASSWORDChanging(value);
					this.SendPropertyChanging();
					this._PASSWORD = value;
					this.SendPropertyChanged("PASSWORD");
					this.OnPASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPEID", DbType="Int")]
		public System.Nullable<int> TYPEID
		{
			get
			{
				return this._TYPEID;
			}
			set
			{
				if ((this._TYPEID != value))
				{
					if (this._TYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTYPEIDChanging(value);
					this.SendPropertyChanging();
					this._TYPEID = value;
					this.SendPropertyChanged("TYPEID");
					this.OnTYPEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATUS", DbType="Int")]
		public System.Nullable<int> STATUS
		{
			get
			{
				return this._STATUS;
			}
			set
			{
				if ((this._STATUS != value))
				{
					this.OnSTATUSChanging(value);
					this.SendPropertyChanging();
					this._STATUS = value;
					this.SendPropertyChanged("STATUS");
					this.OnSTATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TYPE_ACCOUNT", Storage="_TYPE", ThisKey="TYPEID", OtherKey="ID", IsForeignKey=true)]
		public TYPE TYPE
		{
			get
			{
				return this._TYPE.Entity;
			}
			set
			{
				TYPE previousValue = this._TYPE.Entity;
				if (((previousValue != value) 
							|| (this._TYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TYPE.Entity = null;
						previousValue.ACCOUNTs.Remove(this);
					}
					this._TYPE.Entity = value;
					if ((value != null))
					{
						value.ACCOUNTs.Add(this);
						this._TYPEID = value.ID;
					}
					else
					{
						this._TYPEID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
